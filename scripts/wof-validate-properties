#!/usr/bin/env python
# -*-python-*-

import sys
import signal
import multiprocessing
import os.path
import logging

import mapzen.whosonfirst.validator

if __name__ == '__main__': 

    import optparse

    opt_parser = optparse.OptionParser("""wof-validate --options /path/to/wof-data""")

    opt_parser.add_option('--update', dest='update', action='store_true', default=False, help='Rewrite files that have been updated (default is False)')
    opt_parser.add_option('--source', dest='source', action='store', default=None, help='Where to rewrite updated files to (default is None)')

    opt_parser.add_option('--derive', dest='derive', action='store_true', default=False, help='Try to derive missing values (default is False)')
    opt_parser.add_option('--multi', dest='multi', action='store_true', default=False, help='Validate files with multiple processes (default is False)')

    opt_parser.add_option('--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    vld_args = {
        'derive': options.derive
    }

    if options.update:

        if not options.source:
            logging.error("Update flag is set with an export source")
            sys.exit()

        source = os.path.abspath(source)
        exporter = mapzen.whosonfirst.export.flatfile(source)

        vld_args['exporter'] = exporter

    vld = mapzen.whosonfirst.validator.validator(**vld_args)

    # note the scope so that we keep a pointer to
    # vld and exporter (20150922/thisisaaronland)

    def do_validate(path):

        rptr = vld.validate_file(path)

        if rptr.ok():
            logging.debug("%s is OKAY in as much as any of us are really okay..." % path)
        else:
            logging.error("%s FAILED validation" % path)

    def process_args(args):

        for path in args:
            
            path = os.path.abspath(path)
            logging.debug("process %s" % path)

            if os.path.isfile(path):

                do_validate(path)

            elif os.path.isdir(path):

                crawl = mapzen.whosonfirst.utils.crawl(path)

                if not options.multi:

                    for p in crawl:
                        do_validate(p)
                        
                else:

                    def signal_handler(signal, frame):
                        sys.exit(0)
        
                    signal.signal(signal.SIGINT, signal_handler)

                    processes = multiprocessing.cpu_count() * 2
                    pool = multiprocessing.Pool(processes=processes)
            
                    batch = []
                    batch_size = 10000
                    
                    for path in crawl:

                        batch.append(path)

                        if len(batch) >= batch_size:

                            pool.map(do_validate, batch)
                            batch = []
                    
                    if len(batch):
                        pool.map(do_validate, batch)

            else:
                logging.warning("what is %s?" % path)

    if len(args) == 0:
        logging.error("Nothing to validate!")
        sys.exit(1)

    process_args(args)
    sys.exit()
